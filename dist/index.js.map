{"version":3,"sources":["../index.js"],"names":["create","keyRegex","specialFields","dbWrapper","from","collection","callback","col","db","arguments","length","isNotEqualOp","op","endsWith","translateField","field","translateValue","value","String","findAllPossibles","traverse","node","parent","index","children","some","child","childIndex","orNodes","root","type","id","__children","push","result","posible","increased","i","slice","forEach","parseCondition","Object","keys","condition","key","Array","map","exec","Error","queryable","orderBy","where","unsubscribes","limit","lastGet","lastDocs","compiledQueries","processResults","results","docs","count","undefined","doc","values","modify","Promise","resolve","then","batch","firestore","commit","buildQueries","noCache","JSON","parse","stringify","p","reduce","q","order","subscribe","options","Function","onSnapshot","unsubscribeAll","copyOfUnsubscribes","unsubscribe","conditions","fields","get","source","promises","all","next","queries","startAfter","set","docsOrData","applyToResultSet","ref","update","remove","delete","assign","newSpecialFields"],"mappings":"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","file":"index.js","sourcesContent":["const keyRegex = /^\\s*([^<>=\\s]+)\\s*(<>|<|>|<=|>=|==|=)?\\s*$/;\r\nconst specialFields = {\r\n  '@id': '__name__'\r\n};\r\n\r\nconst dbWrapper = db => {\r\n  return {\r\n    from(collection, callback) {\r\n      const col = create(db.collection(collection));\r\n      if (arguments.length < 2) {\r\n        return col;\r\n      }\r\n      callback(col);\r\n      return this;\r\n    }\r\n  };\r\n};\r\n\r\nconst isNotEqualOp = op => {\r\n  return op.endsWith('<>') || op.endsWith('!=') || op.endsWith('!==');\r\n};\r\n\r\nconst translateField = field => specialFields[field] || field;\r\nconst translateValue = (field, value) =>\r\n  field === '@id' ? String(value) : value;\r\n\r\n/**\r\n * algorithm:\r\n * collect all or node, then put them into the list\r\n * each or node contains childIndex (from 0 - number of child)\r\n * we perform infinite loop until no child index can be increased\r\n * for sample:\r\n *  A (2) B (3)  are nodes and its chid number (number insde parentheses)\r\n *  0     0 are values/child indexes\r\n * for each child index, if we can incease it by 1, we reset prev indexes to 0,\r\n * unless we try to increase next child index,\r\n * if no child index can be increased the loop is end\r\n *  A  B\r\n *  0  0\r\n *  1  0\r\n *  0  1\r\n *  1  1\r\n *  0  2\r\n *  1  2\r\n *  totally 6 possible generated\r\n */\r\nconst findAllPossibles = root => {\r\n  function traverse(node, callback, parent, index) {\r\n    if (callback(node, parent, index)) return true;\r\n    if (node.children && node.children.length) {\r\n      node.children.some((child, childIndex) =>\r\n        traverse(child, callback, node, childIndex)\r\n      );\r\n    }\r\n  }\r\n\r\n  const orNodes = [];\r\n\r\n  // create indexes\r\n  traverse(root, (node, parent, index) => {\r\n    node.parent = () => parent;\r\n    if (node.type === 'or') {\r\n      node.id = orNodes.length;\r\n      node.__children = node.children;\r\n      node.childIndex = 0;\r\n      orNodes.push(node);\r\n    }\r\n  });\r\n  const result = [];\r\n  let posible;\r\n  while (true) {\r\n    traverse(root, node => {\r\n      if (node.type === 'or') {\r\n        node.children = [node.__children[node.childIndex]];\r\n      }\r\n      if (node.type !== 'or' && node.type !== 'and') {\r\n        if (!posible) {\r\n          posible = [];\r\n          result.push(posible);\r\n        }\r\n        posible.push(node);\r\n      }\r\n    });\r\n    posible = null;\r\n    let increased = false;\r\n    // increase possible number\r\n    for (let i = 0; i < orNodes.length; i++) {\r\n      // can increase\r\n      const node = orNodes[i];\r\n      if (node.childIndex + 1 < node.__children.length) {\r\n        node.childIndex++;\r\n        // reset prev nodes\r\n        orNodes.slice(0, i).forEach(node => (node.childIndex = 0));\r\n        increased = true;\r\n        break;\r\n      }\r\n    }\r\n    if (!increased) break;\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nconst parseCondition = condition => {\r\n  const result = [];\r\n  Object.keys(condition).forEach(key => {\r\n    const value = condition[key];\r\n    if (key === 'or') {\r\n      const children = [];\r\n      if (value instanceof Array) {\r\n        children.push(...value);\r\n      } else {\r\n        Object.keys(value).forEach(field => {\r\n          children.push({ [field]: value[field] });\r\n        });\r\n      }\r\n\r\n      result.push({\r\n        type: 'or',\r\n        children: children.map(child => ({\r\n          type: 'and',\r\n          children: parseCondition(child)\r\n        }))\r\n      });\r\n    } else {\r\n      // parse normal criteria\r\n      let [, field, op = '=='] = keyRegex.exec(key) || [];\r\n      if (!field) {\r\n        throw new Error('Invalid criteria ' + key);\r\n      }\r\n      if (op === '=' || op === '===') {\r\n        op = '==';\r\n      }\r\n      if (value instanceof Array) {\r\n        if (op !== '==') {\r\n          throw new Error('Unsupported ' + op + ' for Array');\r\n        }\r\n        result.push({\r\n          type: 'or',\r\n          children: value.map(value => ({ field, type: op, value }))\r\n        });\r\n      } else {\r\n        if (op === '<>' || op === '!=' || op === '!==') {\r\n          result.push({\r\n            type: 'or',\r\n            children: [{ field, type: '>', value }, { field, type: '<', value }]\r\n          });\r\n        } else {\r\n          result.push({ field, type: op, value });\r\n        }\r\n      }\r\n    }\r\n  });\r\n  return result;\r\n};\r\n\r\nexport default function create(queryable, collection) {\r\n  if (queryable.collection) {\r\n    if (collection) {\r\n      queryable = queryable.collection(collection);\r\n    } else {\r\n      return dbWrapper(queryable);\r\n    }\r\n  }\r\n  const orderBy = [];\r\n  const where = [];\r\n  const unsubscribes = [];\r\n  let limit = 0;\r\n  let lastGet, lastDocs;\r\n  let compiledQueries;\r\n\r\n  function processResults(results) {\r\n    const docs = {};\r\n    let count = 0;\r\n    lastDocs = results.map(\r\n      result => (result ? result.docs[result.docs.length - 1] : undefined)\r\n    );\r\n    results.some(result => {\r\n      if (!result) return;\r\n      result.forEach(doc => {\r\n        if (limit && count >= limit) return;\r\n        if (!(doc.id in docs)) {\r\n          count++;\r\n        }\r\n        docs[doc.id] = doc;\r\n      });\r\n      return limit && count >= limit;\r\n    });\r\n    return Object.values(docs);\r\n  }\r\n\r\n  function modify(docs, callback) {\r\n    return Promise.resolve(docs).then(docs => {\r\n      const batch = queryable.firestore.batch();\r\n      for (let doc of docs) {\r\n        callback(batch, doc);\r\n      }\r\n      return batch.commit();\r\n    });\r\n  }\r\n\r\n  function buildQueries(noCache) {\r\n    if (!noCache && compiledQueries) return compiledQueries;\r\n\r\n    // should copy where before process\r\n    const posible = findAllPossibles(\r\n      JSON.parse(\r\n        JSON.stringify({\r\n          type: 'and',\r\n          children: where\r\n        })\r\n      )\r\n    );\r\n\r\n    return (compiledQueries = posible.map(p => {\r\n      return p.reduce((q, node) => {\r\n        if (limit) {\r\n          q = q.limit(limit);\r\n        }\r\n        return orderBy\r\n          .reduce((q, order) => q.orderBy(...order), q)\r\n          .where(\r\n            translateField(node.field),\r\n            node.type,\r\n            translateValue(node.field, node.value)\r\n          );\r\n      }, queryable);\r\n    }));\r\n  }\r\n\r\n  return {\r\n    limit(count) {\r\n      limit = count;\r\n      return this;\r\n    },\r\n    subscribe(options, callback) {\r\n      if (options instanceof Function) {\r\n        callback = options;\r\n        options = {};\r\n      }\r\n      unsubscribes.push(\r\n        ...buildQueries().map(queryable =>\r\n          queryable.onSnapshot(options, callback)\r\n        )\r\n      );\r\n      return this;\r\n    },\r\n    unsubscribeAll() {\r\n      const copyOfUnsubscribes = unsubscribes.slice();\r\n      unsubscribes.length = 0;\r\n      copyOfUnsubscribes.forEach(unsubscribe => unsubscribe());\r\n      return this;\r\n    },\r\n    where(...conditions) {\r\n      conditions.forEach(condition => where.push(...parseCondition(condition)));\r\n      lastGet = lastDocs = compiledQueries = undefined;\r\n      return this;\r\n    },\r\n    orderBy(fields) {\r\n      Object.keys(fields).forEach(field =>\r\n        orderBy.push([field, fields[field]])\r\n      );\r\n      return this;\r\n    },\r\n    get: function get({ source } = {}) {\r\n      const promises = buildQueries().map(queryable => queryable.get(source));\r\n      return (lastGet = Promise.all(promises).then(processResults));\r\n    },\r\n    next(options = {}) {\r\n      const { source } = options;\r\n      if (lastGet) {\r\n        return (lastGet = lastGet.then(docs => {\r\n          if (!docs.length) return [];\r\n          const queries = buildQueries();\r\n          const promises = queries.map((queryable, index) => {\r\n            if (!lastDocs[index]) return undefined;\r\n            return queryable.startAfter(lastDocs[index]).get(source);\r\n          });\r\n          return Promise.all(promises).then(processResults);\r\n        }));\r\n      }\r\n      return this.get(options);\r\n    },\r\n    set(docsOrData, applyToResultSet) {\r\n      if (applyToResultSet) {\r\n        return modify(this.get(), (batch, doc) =>\r\n          batch.set(doc.ref, docsOrData)\r\n        );\r\n      }\r\n      return modify(\r\n        Object.keys(docsOrData).map(id => queryable.doc(String(id))),\r\n        (batch, doc) => batch.set(doc, docsOrData[doc.id])\r\n      );\r\n    },\r\n    update(docsOrData, applyToResultSet) {\r\n      if (applyToResultSet) {\r\n        return modify(this.get(), (batch, doc) =>\r\n          batch.update(doc.ref, docsOrData)\r\n        );\r\n      }\r\n      return modify(\r\n        Object.keys(docsOrData).map(id => queryable.doc(String(id))),\r\n        (batch, doc) => batch.update(doc, docsOrData[doc.id])\r\n      );\r\n    },\r\n    remove() {\r\n      return modify(this.get(), (batch, doc) => batch.delete(doc.ref));\r\n    }\r\n  };\r\n}\r\n\r\nObject.assign(create, {\r\n  fields(newSpecialFields) {\r\n    Object.assign(specialFields, newSpecialFields);\r\n    return this;\r\n  }\r\n});\r\n"]}
{"version":3,"sources":["../index.js"],"names":["create","keyRegex","specialFields","arrayMethods","split","copy","Symbol","dbWrapper","from","collection","callback","col","db","arguments","length","translateField","field","translateValue","value","String","findAllPossibles","traverse","node","parent","index","children","some","child","childIndex","orNodes","root","type","id","__children","push","result","posible","increased","i","slice","forEach","parseCondition","Object","keys","condition","key","Array","map","exec","op","Error","frontCode","endChar","endcode","fromCharCode","charCodeAt","queryable","unsubscribes","limit","startAt","orderBy","where","lastGet","lastDocs","compiledQueries","select","pipe","processResults","results","docs","count","undefined","doc","values","reduce","mappedObj","selector","data","mapper","item","Function","f","modify","Promise","resolve","then","batch","firestore","commit","buildQueries","noCache","q","order","JSON","parse","stringify","p","clone","overwriteData","assign","query","funcs","concat","mappers","options","onSnapshot","copyOfUnsubscribes","unsubscribe","args","customSelector","fields","pairs","entries","pair","get","newWhere","conditions","newOrderBy","source","promises","all","x","queries","startAfter","docsOrData","applyToResultSet","set","ref","update","delete","method","newSpecialFields"],"mappings":"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","file":"index.js","sourcesContent":["const keyRegex = /^\\s*([^^<>=\\s]+)\\s*(<>|<|>|<=|>=|==|=|\\^=)?\\s*$/;\r\nconst specialFields = {\r\n  '@id': '__name__'\r\n};\r\nconst arrayMethods = 'slice reduce filter some every'.split(/\\s+/);\r\nconst copy = Symbol('copy');\r\nconst dbWrapper = db => {\r\n  return {\r\n    from(collection, callback) {\r\n      const col = create(db.collection(collection));\r\n      if (arguments.length < 2) {\r\n        return col;\r\n      }\r\n      callback(col);\r\n      return this;\r\n    }\r\n  };\r\n};\r\n\r\nconst translateField = field => specialFields[field] || field;\r\nconst translateValue = (field, value) =>\r\n  field === '@id' ? String(value) : value;\r\n\r\n/**\r\n * algorithm:\r\n * collect all or node, then put them into the list\r\n * each or node contains childIndex (from 0 - number of child)\r\n * we perform infinite loop until no child index can be increased\r\n * for sample:\r\n *  A (2) B (3)  are nodes and its chid number (number insde parentheses)\r\n *  0     0 are values/child indexes\r\n * for each child index, if we can incease it by 1, we reset prev indexes to 0,\r\n * unless we try to increase next child index,\r\n * if no child index can be increased the loop is end\r\n *  A  B\r\n *  0  0\r\n *  1  0\r\n *  0  1\r\n *  1  1\r\n *  0  2\r\n *  1  2\r\n *  totally 6 possible generated\r\n */\r\nconst findAllPossibles = root => {\r\n  function traverse(node, callback, parent, index) {\r\n    if (callback(node, parent, index)) return true;\r\n    if (node.children && node.children.length) {\r\n      node.children.some((child, childIndex) =>\r\n        traverse(child, callback, node, childIndex)\r\n      );\r\n    }\r\n  }\r\n\r\n  const orNodes = [];\r\n\r\n  // create indexes\r\n  traverse(root, (node, parent, index) => {\r\n    node.parent = () => parent;\r\n    if (node.type === 'or') {\r\n      node.id = orNodes.length;\r\n      node.__children = node.children;\r\n      node.childIndex = 0;\r\n      orNodes.push(node);\r\n    }\r\n  });\r\n  const result = [];\r\n  let posible;\r\n  while (true) {\r\n    traverse(root, node => {\r\n      if (node.type === 'or') {\r\n        node.children = [node.__children[node.childIndex]];\r\n      }\r\n      if (node.type !== 'or' && node.type !== 'and') {\r\n        if (!posible) {\r\n          posible = [];\r\n          result.push(posible);\r\n        }\r\n        posible.push(node);\r\n      }\r\n    });\r\n    posible = null;\r\n    let increased = false;\r\n    // increase possible number\r\n    for (let i = 0; i < orNodes.length; i++) {\r\n      // can increase\r\n      const node = orNodes[i];\r\n      if (node.childIndex + 1 < node.__children.length) {\r\n        node.childIndex++;\r\n        // reset prev nodes\r\n        orNodes.slice(0, i).forEach(node => (node.childIndex = 0));\r\n        increased = true;\r\n        break;\r\n      }\r\n    }\r\n    if (!increased) break;\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nconst parseCondition = condition => {\r\n  const result = [];\r\n  Object.keys(condition).forEach(key => {\r\n    let value = condition[key];\r\n    if (key === 'or') {\r\n      const children = [];\r\n      if (value instanceof Array) {\r\n        children.push(...value);\r\n      } else {\r\n        Object.keys(value).forEach(field => {\r\n          children.push({ [field]: value[field] });\r\n        });\r\n      }\r\n\r\n      result.push({\r\n        type: 'or',\r\n        children: children.map(child => ({\r\n          type: 'and',\r\n          children: parseCondition(child)\r\n        }))\r\n      });\r\n    } else {\r\n      // parse normal criteria\r\n      let [, field, op = '=='] = keyRegex.exec(key) || [];\r\n      if (!field) {\r\n        throw new Error('Invalid criteria ' + key);\r\n      }\r\n      if (op === '=' || op === '===') {\r\n        op = '==';\r\n      }\r\n      if (value instanceof Array) {\r\n        if (op !== '==') {\r\n          throw new Error('Unsupported ' + op + ' for Array');\r\n        }\r\n        result.push({\r\n          type: 'or',\r\n          children: value.map(value => ({ field, type: op, value }))\r\n        });\r\n      } else {\r\n        if (op === '<>' || op === '!=' || op === '!==') {\r\n          result.push({\r\n            type: 'or',\r\n            children: [{ field, type: '>', value }, { field, type: '<', value }]\r\n          });\r\n        }\r\n        // process startsWith operator\r\n        else if (op === '^=') {\r\n          value = String(value);\r\n          const length = value.length;\r\n          const frontCode = value.slice(0, length - 1);\r\n          const endChar = value.slice(length - 1, value.length);\r\n          const endcode =\r\n            frontCode + String.fromCharCode(endChar.charCodeAt(0) + 1);\r\n          result.push(\r\n            { field, type: '>=', value },\r\n            { field, type: '<', value: endcode }\r\n          );\r\n        } else {\r\n          result.push({ field, type: op, value });\r\n        }\r\n      }\r\n    }\r\n  });\r\n  return result;\r\n};\r\n\r\nexport default function create(queryable, collection) {\r\n  if (queryable.collection) {\r\n    if (collection) {\r\n      queryable = queryable.collection(collection);\r\n    } else {\r\n      return dbWrapper(queryable);\r\n    }\r\n  }\r\n  const unsubscribes = [];\r\n  let limit = 0;\r\n  let startAt;\r\n  let orderBy = [];\r\n  let where = [];\r\n  let lastGet, lastDocs;\r\n  let compiledQueries;\r\n  let select = [];\r\n  let pipe = [];\r\n  let map = [];\r\n\r\n  function processResults(results) {\r\n    const docs = {};\r\n    let count = 0;\r\n    lastDocs = results.map(\r\n      result => (result ? result.docs[result.docs.length - 1] : undefined)\r\n    );\r\n    results.some(result => {\r\n      if (!result) return;\r\n      result.forEach(doc => {\r\n        if (limit && count >= limit) return;\r\n        if (!(doc.id in docs)) {\r\n          count++;\r\n        }\r\n        docs[doc.id] = doc;\r\n      });\r\n      return limit && count >= limit;\r\n    });\r\n\r\n    let result = Object.values(docs);\r\n\r\n    if (select.length) {\r\n      result = result.map(doc => {\r\n        return select.reduce(\r\n          (mappedObj, selector) => selector(mappedObj, doc.data(), doc),\r\n          {}\r\n        );\r\n      });\r\n    }\r\n\r\n    if (map.length) {\r\n      result = map.reduce(\r\n        (result, mapper) =>\r\n          result.map(\r\n            (item, index) =>\r\n              mapper instanceof Function ? mapper(item, index) : item[mapper]()\r\n          ),\r\n        result\r\n      );\r\n    }\r\n\r\n    if (pipe.length) {\r\n      result = pipe.reduce((result, f) => f(result), result);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  function modify(docs, callback) {\r\n    return Promise.resolve(docs).then(docs => {\r\n      const batch = queryable.firestore.batch();\r\n      for (let doc of docs) {\r\n        callback(batch, doc);\r\n      }\r\n      return batch.commit();\r\n    });\r\n  }\r\n\r\n  function buildQueries(noCache) {\r\n    if (!noCache && compiledQueries) return compiledQueries;\r\n\r\n    if (!where.length) {\r\n      let q = queryable;\r\n      if (limit) {\r\n        q = q.limit(limit);\r\n      }\r\n      if (startAt !== undefined) {\r\n        q = q.startAt(startAt);\r\n      }\r\n\r\n      return [orderBy.reduce((q, order) => q.orderBy(...order), q)];\r\n    }\r\n\r\n    // should copy where before process\r\n    const posible = findAllPossibles(\r\n      JSON.parse(\r\n        JSON.stringify({\r\n          type: 'and',\r\n          children: where\r\n        })\r\n      )\r\n    );\r\n\r\n    return (compiledQueries = posible.map(p => {\r\n      return p.reduce((q, node) => {\r\n        if (limit) {\r\n          q = q.limit(limit);\r\n        }\r\n        if (startAt !== undefined) {\r\n          q = q.startAt(startAt);\r\n        }\r\n        return orderBy\r\n          .reduce((q, order) => q.orderBy(...order), q)\r\n          .where(\r\n            translateField(node.field),\r\n            node.type,\r\n            translateValue(node.field, node.value)\r\n          );\r\n      }, queryable);\r\n    }));\r\n  }\r\n\r\n  function clone(overwriteData) {\r\n    return create(queryable)[copy](\r\n      Object.assign(\r\n        {\r\n          limit,\r\n          where,\r\n          orderBy,\r\n          startAt,\r\n          select,\r\n          pipe,\r\n          map\r\n        },\r\n        overwriteData\r\n      )\r\n    );\r\n  }\r\n\r\n  const query = {\r\n    [copy](data) {\r\n      limit = data.limit;\r\n      where = data.where;\r\n      orderBy = data.orderBy;\r\n      startAt = data.startAt;\r\n      select = data.select;\r\n      pipe = data.pipe;\r\n      map = data.map;\r\n      return this;\r\n    },\r\n    pipe(...funcs) {\r\n      return clone({\r\n        pipe: pipe.slice().concat(funcs)\r\n      });\r\n    },\r\n    map(...mappers) {\r\n      return clone({\r\n        map: map.slice().concat(mappers)\r\n      });\r\n    },\r\n    subscribe(options, callback) {\r\n      if (options instanceof Function) {\r\n        callback = options;\r\n        options = {};\r\n      }\r\n      unsubscribes.push(\r\n        ...buildQueries().map(queryable =>\r\n          queryable.onSnapshot(options, callback)\r\n        )\r\n      );\r\n      return this;\r\n    },\r\n    unsubscribeAll() {\r\n      const copyOfUnsubscribes = unsubscribes.slice();\r\n      unsubscribes.length = 0;\r\n      copyOfUnsubscribes.forEach(unsubscribe => unsubscribe());\r\n      return this;\r\n    },\r\n    /**\r\n     * supports:\r\n     * single field value selector: select(true, 'field') => fieldValue\r\n     * multiple fields selector: select('field1', 'field2', ...) => { field1: field1Value, field2: field2Value }\r\n     * obj map selector: select({ field: 'newFieldName' }) => { newFieldName: fieldValue }\r\n     * custom selector: select(Function)\r\n     */\r\n    select(...args) {\r\n      let selector;\r\n      // single field value selector\r\n      if (args[0] === true) {\r\n        const field = args[1];\r\n        selector = (mappedObj, data, doc) =>\r\n          field === '@id' ? doc.id : data[field];\r\n      } else if (args[0] instanceof Function) {\r\n        const customSelector = args[0];\r\n        selector = (mappedObj, data, doc) => customSelector(data, doc);\r\n      } else if (typeof args[0] === 'string') {\r\n        const fields = args;\r\n        selector = (mappedObj, data, doc) => {\r\n          fields.forEach(\r\n            field => (mappedObj[field] = field === '@id' ? doc.id : data[field])\r\n          );\r\n          return mappedObj;\r\n        };\r\n      } else {\r\n        const pairs = Object.entries(args[0]);\r\n        selector = (mappedObj, data, doc) => {\r\n          pairs.forEach(\r\n            pair =>\r\n              (mappedObj[pair[1]] = pair[0] === '@id' ? doc.id : data[pair[0]])\r\n          );\r\n          return mappedObj;\r\n        };\r\n      }\r\n      return clone({\r\n        select: [selector]\r\n      });\r\n    },\r\n    limit(count) {\r\n      return clone({ limit: count });\r\n    },\r\n    first() {\r\n      return this.limit(1)\r\n        .get()\r\n        .then(results => {\r\n          return results[0];\r\n        });\r\n    },\r\n    where(...conditions) {\r\n      const newWhere = where.slice();\r\n      conditions.forEach(condition =>\r\n        newWhere.push(...parseCondition(condition))\r\n      );\r\n      return clone({\r\n        where: newWhere\r\n      });\r\n    },\r\n    orderBy(fields) {\r\n      const newOrderBy = orderBy.slice();\r\n      Object.keys(fields).forEach(field =>\r\n        newOrderBy.push([field, fields[field]])\r\n      );\r\n      return clone({\r\n        orderBy: newOrderBy\r\n      });\r\n    },\r\n    get: function get({ source } = {}) {\r\n      const promises = buildQueries().map(queryable => queryable.get(source));\r\n      return (lastGet = Promise.all(promises).then(processResults));\r\n    },\r\n    data(options) {\r\n      return this.get(options).then(results => results.map(x => x.data()));\r\n    },\r\n    next(options = {}) {\r\n      const { source } = options;\r\n      if (lastGet) {\r\n        return (lastGet = lastGet.then(docs => {\r\n          if (!docs.length) return [];\r\n          const queries = buildQueries();\r\n          const promises = queries.map((queryable, index) => {\r\n            if (!lastDocs[index]) return undefined;\r\n            return queryable.startAfter(lastDocs[index]).get(source);\r\n          });\r\n          return Promise.all(promises).then(processResults);\r\n        }));\r\n      }\r\n      return this.get(options);\r\n    },\r\n    set(docsOrData, applyToResultSet) {\r\n      if (applyToResultSet) {\r\n        return modify(this.get(), (batch, doc) =>\r\n          batch.set(doc.ref, docsOrData)\r\n        );\r\n      }\r\n      return modify(\r\n        Object.keys(docsOrData).map(id => queryable.doc(String(id))),\r\n        (batch, doc) => batch.set(doc, docsOrData[doc.id])\r\n      );\r\n    },\r\n    update(docsOrData, applyToResultSet) {\r\n      if (applyToResultSet) {\r\n        return modify(this.get(), (batch, doc) =>\r\n          batch.update(doc.ref, docsOrData)\r\n        );\r\n      }\r\n      return modify(\r\n        Object.keys(docsOrData).map(id => queryable.doc(String(id))),\r\n        (batch, doc) => batch.update(doc, docsOrData[doc.id])\r\n      );\r\n    },\r\n    remove() {\r\n      return modify(this.get(), (batch, doc) => batch.delete(doc.ref));\r\n    }\r\n  };\r\n\r\n  arrayMethods.forEach(method => {\r\n    query[method] = (...args) =>\r\n      query.get().then(results => results[method](...args));\r\n  });\r\n\r\n  return query;\r\n}\r\n\r\nObject.assign(create, {\r\n  fields(newSpecialFields) {\r\n    Object.assign(specialFields, newSpecialFields);\r\n    return this;\r\n  }\r\n});\r\n"]}
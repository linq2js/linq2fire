{"version":3,"sources":["../index.js"],"names":["create","keyRegex","specialFields","dbWrapper","from","collection","callback","col","db","arguments","length","isNotEqualOp","op","endsWith","translateField","field","translateValue","value","String","queryable","orderBy","whereAnd","whereOr","limit","lastGet","lastDocs","bind","q","Object","keys","reduce","key","exec","where","forEach","or","buildQueries","queries","order","push","processResults","results","docs","count","map","result","undefined","some","doc","id","values","conditions","condition","replace","Array","entries","entry","notEqualOp","call","assign","fields","get","source","promises","Promise","all","then","next","options","index","startAfter","set","data","multipleDocData","update","ref","remove","delete","newSpecialFields"],"mappings":"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","file":"index.js","sourcesContent":["const keyRegex = /^([^<>=]+)(<|>|<=|>=|==|=)?/;\r\nconst specialFields = {\r\n  '@id': '__name__'\r\n};\r\n\r\nconst dbWrapper = db => {\r\n  return {\r\n    from(collection, callback) {\r\n      const col = create(db.collection(collection));\r\n      if (arguments.length < 2) {\r\n        return col;\r\n      }\r\n      callback(col);\r\n      return this;\r\n    }\r\n  };\r\n};\r\n\r\nconst isNotEqualOp = op => {\r\n  return op.endsWith('<>') || op.endsWith('!=') || op.endsWith('!==');\r\n};\r\n\r\nconst translateField = field => specialFields[field] || field;\r\nconst translateValue = (field, value) =>\r\n  field === '@id' ? String(value) : value;\r\n\r\nexport default function create(queryable, collection) {\r\n  if (queryable.collection) {\r\n    if (collection) {\r\n      queryable = queryable.collection(collection);\r\n    } else {\r\n      return dbWrapper(queryable);\r\n    }\r\n  }\r\n  const orderBy = [];\r\n  const whereAnd = {};\r\n  const whereOr = [];\r\n  let limit = 0;\r\n  let lastGet, lastDocs;\r\n\r\n  function bind(callback) {\r\n    let q = Object.keys(whereAnd).reduce((queryable, key) => {\r\n      const [, field, op = '='] = keyRegex.exec(key);\r\n      const value = whereAnd[key];\r\n      return queryable.where(\r\n        translateField(field),\r\n        op === '=' ? '==' : op,\r\n        translateValue(field, value)\r\n      );\r\n    }, queryable);\r\n\r\n    if (whereOr.length) {\r\n      whereOr.forEach(or => {\r\n        create(q)\r\n          .where(or)\r\n          .bind(callback);\r\n      });\r\n    } else {\r\n      callback(q);\r\n    }\r\n  }\r\n\r\n  function buildQueries() {\r\n    const queries = [];\r\n    bind(queryable => {\r\n      if (limit) {\r\n        queryable = queryable.limit(limit);\r\n      }\r\n      if (orderBy.length) {\r\n        queryable = orderBy.reduce(\r\n          (queryable, order) => queryable.orderBy(...order),\r\n          queryable\r\n        );\r\n      }\r\n      queries.push(queryable);\r\n    });\r\n\r\n    return queries;\r\n  }\r\n\r\n  function processResults(results) {\r\n    const docs = {};\r\n    let count = 0;\r\n    lastDocs = results.map(\r\n      result => (result ? result.docs[result.docs.length - 1] : undefined)\r\n    );\r\n    results.some(result => {\r\n      if (!result) return;\r\n      result.forEach(doc => {\r\n        if (limit && count >= limit) return;\r\n        if (!(doc.id in docs)) {\r\n          count++;\r\n        }\r\n        docs[doc.id] = doc;\r\n      });\r\n      return limit && count >= limit;\r\n    });\r\n    return Object.values(docs);\r\n  }\r\n\r\n  return {\r\n    limit(count) {\r\n      limit = count;\r\n      return this;\r\n    },\r\n    bind,\r\n    where(...conditions) {\r\n      conditions.forEach(condition => {\r\n        Object.keys(condition).forEach(key => {\r\n          let value = condition[key];\r\n          key = key.replace(/\\s+/g, '');\r\n          if (key === 'or') {\r\n            if (!(value instanceof Array)) {\r\n              value = Object.entries(value).map(entry => ({\r\n                [entry[0]]: entry[1]\r\n              }));\r\n            }\r\n            whereOr.push(...value);\r\n          } else {\r\n            const notEqualOp = isNotEqualOp(key);\r\n\r\n            if (value instanceof Array) {\r\n              if (notEqualOp) {\r\n                // process not in operator\r\n              } else {\r\n                whereOr.push(\r\n                  ...[].map.call(value, value => ({ [key]: value }))\r\n                );\r\n              }\r\n            } else {\r\n              if (notEqualOp) {\r\n                const [, field] = keyRegex.exec(key);\r\n                whereOr.push(\r\n                  { [field + '<']: value },\r\n                  { [field + '>']: value }\r\n                );\r\n              } else {\r\n                Object.assign(whereAnd, { [key]: value });\r\n              }\r\n            }\r\n          }\r\n        });\r\n      });\r\n      return this;\r\n    },\r\n    orderBy(fields) {\r\n      Object.keys(fields).forEach(field =>\r\n        orderBy.push([field, fields[field]])\r\n      );\r\n      return this;\r\n    },\r\n    get: function get({ source } = {}) {\r\n      const promises = buildQueries().map(queryable => queryable.get(source));\r\n      return (lastGet = Promise.all(promises).then(processResults));\r\n    },\r\n    next(options = {}) {\r\n      const { source } = options;\r\n      if (lastGet) {\r\n        return (lastGet = lastGet.then(docs => {\r\n          if (!docs.length) return [];\r\n          const queries = buildQueries();\r\n          const promises = queries.map((queryable, index) => {\r\n            if (!lastDocs[index]) return undefined;\r\n            return queryable.startAfter(lastDocs[index]).get(source);\r\n          });\r\n          return Promise.all(promises).then(processResults);\r\n        }));\r\n      }\r\n      return this.get(options);\r\n    },\r\n    set(id, data) {\r\n      // create multiple document\r\n      if (arguments.length === 1) {\r\n        const multipleDocData = id;\r\n        return Promise.all(\r\n          Object.keys(multipleDocData).map(id =>\r\n            queryable.doc(String(id)).set(multipleDocData[id])\r\n          )\r\n        );\r\n      }\r\n      return queryable.doc(String(id)).set(data);\r\n    },\r\n    update(data) {\r\n      return this.get().then(docs => {\r\n        return Promise.all(\r\n          docs.map(doc => {\r\n            return doc.ref.set(data);\r\n          })\r\n        );\r\n      });\r\n    },\r\n    remove() {\r\n      return this.get().then(docs => {\r\n        return Promise.all(\r\n          docs.map(doc => {\r\n            return doc.ref.delete();\r\n          })\r\n        );\r\n      });\r\n    }\r\n  };\r\n}\r\n\r\nObject.assign(create, {\r\n  fields(newSpecialFields) {\r\n    Object.assign(specialFields, newSpecialFields);\r\n    return this;\r\n  }\r\n});\r\n"]}
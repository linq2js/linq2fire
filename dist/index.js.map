{"version":3,"sources":["../index.js"],"names":["create","dbWrapper","from","collection","db","queryable","orderBy","whereAnd","whereOr","limit","count","bind","callback","q","Object","keys","reduce","key","exec","field","op","value","where","length","forEach","or","conditions","condition","replace","Array","entries","map","entry","push","call","assign","fields","get","options","Promise","resolve","reject","promises","order","all","then","docs","results","some","result","doc","id","values"],"mappings":"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","file":"index.js","sourcesContent":["const dbWrapper = db => {\r\n  return {\r\n    from(collection) {\r\n      return create(db.collection(collection));\r\n    }\r\n  };\r\n};\r\n\r\nexport default function create(queryable, collection) {\r\n  if (queryable.collection) {\r\n    if (collection) {\r\n      queryable = queryable.collection(collection);\r\n    } else {\r\n      return dbWrapper(queryable);\r\n    }\r\n  }\r\n  const orderBy = [];\r\n  const whereAnd = {};\r\n  const whereOr = [];\r\n  let limit = 0;\r\n  return {\r\n    limit(count) {\r\n      limit = count;\r\n      return this;\r\n    },\r\n    bind(callback) {\r\n      let q = Object.keys(whereAnd).reduce((queryable, key) => {\r\n        const [, field, op = '='] = /^([^<>=]+)(<|>|<=|>=|==|=)?/.exec(key);\r\n        const value = whereAnd[key];\r\n        return queryable.where(field, op === '=' ? '==' : op, value);\r\n      }, queryable);\r\n\r\n      if (whereOr.length) {\r\n        whereOr.forEach(or => {\r\n          create(q)\r\n            .where(or)\r\n            .bind(callback);\r\n        });\r\n      } else {\r\n        callback(q);\r\n      }\r\n    },\r\n    where(...conditions) {\r\n      conditions.forEach(condition => {\r\n        Object.keys(condition).forEach(key => {\r\n          key = key.replace(/\\s+/g, '');\r\n          let value = condition[key];\r\n          if (key === 'or') {\r\n            if (!(value instanceof Array)) {\r\n              value = Object.entries(value).map(entry => ({\r\n                [entry[0]]: entry[1]\r\n              }));\r\n            }\r\n            whereOr.push(...value);\r\n          } else {\r\n            if (value instanceof Array) {\r\n              whereOr.push(...[].map.call(value, value => ({ [key]: value })));\r\n            } else {\r\n              Object.assign(whereAnd, { [key]: value });\r\n            }\r\n          }\r\n        });\r\n      });\r\n      return this;\r\n    },\r\n    orderBy(fields) {\r\n      Object.keys(fields).forEach(field =>\r\n        orderBy.push([field, fields[field]])\r\n      );\r\n      return this;\r\n    },\r\n    get: function get(options) {\r\n      return new Promise((resolve, reject) => {\r\n        const promises = [];\r\n        this.bind(queryable => {\r\n          if (limit) {\r\n            queryable = queryable.limit(limit);\r\n          }\r\n          if (orderBy.length) {\r\n            queryable = orderBy.reduce(\r\n              (queryable, order) => queryable.orderBy(...order),\r\n              queryable\r\n            );\r\n          }\r\n          promises.push(queryable.get(options));\r\n        });\r\n\r\n        Promise.all(promises).then(results => {\r\n          const docs = {};\r\n          let count = 0;\r\n          results.some(result => {\r\n            result.forEach(doc => {\r\n              if (limit && count >= limit) return;\r\n              if (!(doc.id in docs)) {\r\n                count++;\r\n              }\r\n              docs[doc.id] = doc;\r\n            });\r\n            return limit && count >= limit;\r\n          });\r\n          resolve(Object.values(docs));\r\n        }, reject);\r\n      });\r\n    }\r\n  };\r\n}\r\n"]}
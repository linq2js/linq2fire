{"version":3,"sources":["../index.js"],"names":["create","keyRegex","specialFields","arrayMethods","split","copy","dbWrapper","from","collection","callback","col","db","arguments","length","deepClone","clone","Object","assign","obj","keys","forEach","key","Array","isArray","translateField","field","translateValue","value","String","cloneNode","node","children","map","undefined","findAllPossibles","root","traverse","parent","index","some","child","childIndex","orNodes","type","id","__children","push","result","posible","increased","i","slice","parseCondition","condition","exec","op","Error","frontCode","endChar","endcode","fromCharCode","charCodeAt","queryable","unsubscribes","limit","startAt","orderBy","where","lastGet","lastDocs","compiledQueries","select","pipe","processResults","results","docs","count","doc","values","reduce","mappedObj","selector","data","mapper","item","Function","f","modify","Promise","resolve","then","batch","firestore","commit","createOrderedQuery","q","pairs","entries","order","buildQueries","noCache","p","overwriteData","query","funcs","concat","mappers","options","currentUnsubscribes","onSnapshot","unsubscribe","indexOf","splice","copyOfUnsubscribes","args","customSelector","fields","pair","get","newWhere","conditions","source","promises","all","x","queries","startAfter","docsOrData","applyToResultSet","set","ref","update","delete","method","newSpecialFields"],"mappings":"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","file":"index.js","sourcesContent":["const keyRegex = /^\\s*([^^<>=\\s]+)\\s*(<>|<|>|<=|>=|==|=|\\^=|array-contains|has)?\\s*$/;\r\nconst specialFields = {\r\n  '@id': '__name__'\r\n};\r\nconst arrayMethods = 'slice reduce filter some every'.split(/\\s+/);\r\nconst copy = '__copy__';\r\nconst dbWrapper = db => {\r\n  return {\r\n    from(collection, callback) {\r\n      const col = create(db.collection(collection));\r\n      if (arguments.length < 2) {\r\n        return col;\r\n      }\r\n      callback(col);\r\n      return this;\r\n    }\r\n  };\r\n};\r\nconst deepClone = obj => {\r\n  let clone = Object.assign({}, obj);\r\n  Object.keys(clone).forEach(\r\n    key =>\r\n      (clone[key] =\r\n        typeof obj[key] === 'object' ? deepClone(obj[key]) : obj[key])\r\n  );\r\n  return Array.isArray(obj)\r\n    ? (clone.length = obj.length) && Array.from(clone)\r\n    : clone;\r\n};\r\nconst translateField = field => specialFields[field] || field;\r\nconst translateValue = (field, value) =>\r\n  field === '@id' ? String(value) : value;\r\nconst cloneNode = node => {\r\n  return Object.assign({}, node, {\r\n    children: node.children ? node.children.map(cloneNode) : undefined\r\n  });\r\n};\r\n/**\r\n * algorithm:\r\n * collect all or node, then put them into the list\r\n * each or node contains childIndex (from 0 - number of child)\r\n * we perform infinite loop until no child index can be increased\r\n * for sample:\r\n *  A (2) B (3)  are nodes and its chid number (number insde parentheses)\r\n *  0     0 are values/child indexes\r\n * for each child index, if we can incease it by 1, we reset prev indexes to 0,\r\n * unless we try to increase next child index,\r\n * if no child index can be increased the loop is end\r\n *  A  B\r\n *  0  0\r\n *  1  0\r\n *  0  1\r\n *  1  1\r\n *  0  2\r\n *  1  2\r\n *  totally 6 possible generated\r\n */\r\nconst findAllPossibles = root => {\r\n  root = cloneNode(root);\r\n  function traverse(node, callback, parent, index) {\r\n    if (callback(node, parent, index)) return true;\r\n    if (node.children && node.children.length) {\r\n      node.children.some((child, childIndex) =>\r\n        traverse(child, callback, node, childIndex)\r\n      );\r\n    }\r\n  }\r\n\r\n  const orNodes = [];\r\n\r\n  // create indexes\r\n  traverse(root, (node, parent, index) => {\r\n    node.parent = () => parent;\r\n    if (node.type === 'or') {\r\n      node.id = orNodes.length;\r\n      node.__children = node.children;\r\n      node.childIndex = 0;\r\n      orNodes.push(node);\r\n    }\r\n  });\r\n  const result = [];\r\n  let posible;\r\n  while (true) {\r\n    traverse(root, node => {\r\n      if (node.type === 'or') {\r\n        node.children = [node.__children[node.childIndex]];\r\n      }\r\n      if (node.type !== 'or' && node.type !== 'and') {\r\n        if (!posible) {\r\n          posible = [];\r\n          result.push(posible);\r\n        }\r\n        posible.push(node);\r\n      }\r\n    });\r\n    posible = null;\r\n    let increased = false;\r\n    // increase possible number\r\n    for (let i = 0; i < orNodes.length; i++) {\r\n      // can increase\r\n      const node = orNodes[i];\r\n      if (node.childIndex + 1 < node.__children.length) {\r\n        node.childIndex++;\r\n        // reset prev nodes\r\n        orNodes.slice(0, i).forEach(node => (node.childIndex = 0));\r\n        increased = true;\r\n        break;\r\n      }\r\n    }\r\n    if (!increased) break;\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nconst parseCondition = condition => {\r\n  const result = [];\r\n  Object.keys(condition).forEach(key => {\r\n    let value = condition[key];\r\n    if (key === 'or') {\r\n      const children = [];\r\n      if (value instanceof Array) {\r\n        children.push(...value);\r\n      } else {\r\n        Object.keys(value).forEach(field => {\r\n          children.push({ [field]: value[field] });\r\n        });\r\n      }\r\n\r\n      result.push({\r\n        type: 'or',\r\n        children: children.map(child => ({\r\n          type: 'and',\r\n          children: parseCondition(child)\r\n        }))\r\n      });\r\n    } else {\r\n      // parse normal criteria\r\n      let [, field, op = '=='] = keyRegex.exec(key) || [];\r\n      if (!field) {\r\n        throw new Error('Invalid criteria ' + key);\r\n      }\r\n      if (op === 'has') {\r\n        op = 'array-contains';\r\n      }\r\n      if (op === '=' || op === '===') {\r\n        op = '==';\r\n      }\r\n      if (value instanceof Array) {\r\n        if (op !== '==') {\r\n          throw new Error('Unsupported ' + op + ' for Array');\r\n        }\r\n        result.push({\r\n          type: 'or',\r\n          children: value.map(value => ({ field, type: op, value }))\r\n        });\r\n      } else {\r\n        if (op === '<>' || op === '!=' || op === '!==') {\r\n          result.push({\r\n            type: 'or',\r\n            children: [{ field, type: '>', value }, { field, type: '<', value }]\r\n          });\r\n        }\r\n        // process startsWith operator\r\n        else if (op === '^=') {\r\n          value = String(value);\r\n          const length = value.length;\r\n          const frontCode = value.slice(0, length - 1);\r\n          const endChar = value.slice(length - 1, value.length);\r\n          const endcode =\r\n            frontCode + String.fromCharCode(endChar.charCodeAt(0) + 1);\r\n          result.push(\r\n            { field, type: '>=', value },\r\n            { field, type: '<', value: endcode }\r\n          );\r\n        } else {\r\n          result.push({ field, type: op, value });\r\n        }\r\n      }\r\n    }\r\n  });\r\n  return result;\r\n};\r\n\r\nexport default function create(queryable, collection) {\r\n  if (queryable.collection) {\r\n    if (collection) {\r\n      queryable = queryable.collection(collection);\r\n    } else {\r\n      return dbWrapper(queryable);\r\n    }\r\n  }\r\n  const unsubscribes = [];\r\n  let limit = 0;\r\n  let startAt;\r\n  let orderBy;\r\n  let where = [];\r\n  let lastGet, lastDocs;\r\n  let compiledQueries;\r\n  let select = [];\r\n  let pipe = [];\r\n  let map = [];\r\n\r\n  function processResults(results) {\r\n    const docs = {};\r\n    let count = 0;\r\n    lastDocs = results.map(\r\n      result => (result ? result.docs[result.docs.length - 1] : undefined)\r\n    );\r\n    results.some(result => {\r\n      if (!result) return;\r\n      result.forEach(doc => {\r\n        if (limit && count >= limit) return;\r\n        if (!(doc.id in docs)) {\r\n          count++;\r\n        }\r\n        docs[doc.id] = doc;\r\n      });\r\n      return limit && count >= limit;\r\n    });\r\n\r\n    let result = Object.values(docs);\r\n\r\n    if (select.length) {\r\n      result = result.map(doc => {\r\n        return select.reduce(\r\n          (mappedObj, selector) => selector(mappedObj, doc.data(), doc),\r\n          {}\r\n        );\r\n      });\r\n    }\r\n\r\n    if (map.length) {\r\n      result = map.reduce(\r\n        (result, mapper) =>\r\n          result.map(\r\n            (item, index) =>\r\n              mapper instanceof Function ? mapper(item, index) : item[mapper]()\r\n          ),\r\n        result\r\n      );\r\n    }\r\n\r\n    if (pipe.length) {\r\n      result = pipe.reduce((result, f) => f(result), result);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  function modify(docs, callback) {\r\n    return Promise.resolve(docs).then(docs => {\r\n      const batch = queryable.firestore.batch();\r\n      for (let doc of docs) {\r\n        callback(batch, doc);\r\n      }\r\n      return batch.commit();\r\n    });\r\n  }\r\n\r\n  function createOrderedQuery(q) {\r\n    if (!orderBy) return q;\r\n    const pairs = Object.entries(orderBy);\r\n    return pairs.reduce((q, order) => q.orderBy(...order), q);\r\n  }\r\n\r\n  function buildQueries(noCache) {\r\n    if (!noCache && compiledQueries) return compiledQueries;\r\n\r\n    if (!where.length) {\r\n      let q = queryable;\r\n      if (limit) {\r\n        q = q.limit(limit);\r\n      }\r\n      if (startAt !== undefined) {\r\n        q = q.startAt(startAt);\r\n      }\r\n\r\n      return [createOrderedQuery(q)];\r\n    }\r\n\r\n    // should copy where before process\r\n    const posible = findAllPossibles({\r\n      type: 'and',\r\n      children: where\r\n    });\r\n\r\n    return (compiledQueries = posible.map(p => {\r\n      let q = p.reduce((q, node) => {\r\n        return q.where(\r\n          translateField(node.field),\r\n          node.type,\r\n          translateValue(node.field, node.value)\r\n        );\r\n      }, queryable);\r\n\r\n      if (limit) {\r\n        q = q.limit(limit);\r\n      }\r\n      if (startAt !== undefined) {\r\n        q = q.startAt(startAt);\r\n      }\r\n\r\n      return createOrderedQuery(q);\r\n    }));\r\n  }\r\n\r\n  function clone(overwriteData) {\r\n    return create(queryable)[copy](\r\n      Object.assign(\r\n        {\r\n          limit,\r\n          where,\r\n          orderBy,\r\n          startAt,\r\n          select,\r\n          pipe,\r\n          map\r\n        },\r\n        overwriteData\r\n      )\r\n    );\r\n  }\r\n\r\n  const query = {\r\n    [copy](data) {\r\n      limit = data.limit;\r\n      where = data.where;\r\n      orderBy = data.orderBy;\r\n      startAt = data.startAt;\r\n      select = data.select;\r\n      pipe = data.pipe;\r\n      map = data.map;\r\n      return this;\r\n    },\r\n    pipe(...funcs) {\r\n      return clone({\r\n        pipe: pipe.slice().concat(funcs)\r\n      });\r\n    },\r\n    map(...mappers) {\r\n      return clone({\r\n        map: map.slice().concat(mappers)\r\n      });\r\n    },\r\n    subscribe(options, callback) {\r\n      if (options instanceof Function) {\r\n        callback = options;\r\n        options = {};\r\n      }\r\n      const currentUnsubscribes = buildQueries().map(queryable =>\r\n        queryable.onSnapshot(options, callback)\r\n      );\r\n      unsubscribes.push(...currentUnsubscribes);\r\n      return function() {\r\n        currentUnsubscribes.forEach(unsubscribe => {\r\n          unsubscribe();\r\n          const index = unsubscribes.indexOf(unsubscribe);\r\n          if (index !== -1) {\r\n            unsubscribes.splice(index, 1);\r\n          }\r\n        });\r\n      };\r\n    },\r\n    unsubscribeAll() {\r\n      const copyOfUnsubscribes = unsubscribes.slice();\r\n      unsubscribes.length = 0;\r\n      copyOfUnsubscribes.forEach(unsubscribe => unsubscribe());\r\n      return this;\r\n    },\r\n    /**\r\n     * supports:\r\n     * single field value selector: select(true, 'field') => fieldValue\r\n     * multiple fields selector: select('field1', 'field2', ...) => { field1: field1Value, field2: field2Value }\r\n     * obj map selector: select({ field: 'newFieldName' }) => { newFieldName: fieldValue }\r\n     * custom selector: select(Function)\r\n     */\r\n    select(...args) {\r\n      let selector;\r\n      // single field value selector\r\n      if (args[0] === true) {\r\n        const field = args[1];\r\n        selector = (mappedObj, data, doc) =>\r\n          field === '@id' ? doc.id : data[field];\r\n      } else if (args[0] instanceof Function) {\r\n        const customSelector = args[0];\r\n        selector = (mappedObj, data, doc) => customSelector(data, doc);\r\n      } else if (typeof args[0] === 'string') {\r\n        const fields = args;\r\n        selector = (mappedObj, data, doc) => {\r\n          fields.forEach(\r\n            field => (mappedObj[field] = field === '@id' ? doc.id : data[field])\r\n          );\r\n          return mappedObj;\r\n        };\r\n      } else {\r\n        const pairs = Object.entries(args[0]);\r\n        selector = (mappedObj, data, doc) => {\r\n          pairs.forEach(\r\n            pair =>\r\n              (mappedObj[pair[1]] = pair[0] === '@id' ? doc.id : data[pair[0]])\r\n          );\r\n          return mappedObj;\r\n        };\r\n      }\r\n      return clone({\r\n        select: [selector]\r\n      });\r\n    },\r\n    limit(count) {\r\n      return clone({ limit: count });\r\n    },\r\n    first() {\r\n      return this.limit(1)\r\n        .get()\r\n        .then(results => {\r\n          return results[0];\r\n        });\r\n    },\r\n    where(...conditions) {\r\n      const newWhere = where.slice();\r\n      conditions.forEach(condition =>\r\n        newWhere.push(...parseCondition(condition))\r\n      );\r\n      return clone({\r\n        where: newWhere\r\n      });\r\n    },\r\n    orderBy(fields) {\r\n      return clone({\r\n        orderBy: Object.assign({}, orderBy, fields)\r\n      });\r\n    },\r\n    get: function get({ source } = {}) {\r\n      const promises = buildQueries().map(queryable => queryable.get(source));\r\n      return (lastGet = Promise.all(promises).then(processResults));\r\n    },\r\n    data(options) {\r\n      return this.get(options).then(results => results.map(x => x.data()));\r\n    },\r\n    next(options = {}) {\r\n      const { source } = options;\r\n      if (lastGet) {\r\n        return (lastGet = lastGet.then(docs => {\r\n          if (!docs.length) return [];\r\n          const queries = buildQueries();\r\n          const promises = queries.map((queryable, index) => {\r\n            if (!lastDocs[index]) return undefined;\r\n            return queryable.startAfter(lastDocs[index]).get(source);\r\n          });\r\n          return Promise.all(promises).then(processResults);\r\n        }));\r\n      }\r\n      return this.get(options);\r\n    },\r\n    set(docsOrData, applyToResultSet) {\r\n      if (applyToResultSet) {\r\n        return modify(this.get(), (batch, doc) =>\r\n          batch.set(doc.ref, docsOrData)\r\n        );\r\n      }\r\n      return modify(\r\n        Object.keys(docsOrData).map(id => queryable.doc(String(id))),\r\n        (batch, doc) => batch.set(doc, docsOrData[doc.id])\r\n      );\r\n    },\r\n    update(docsOrData, applyToResultSet) {\r\n      if (applyToResultSet) {\r\n        return modify(this.get(), (batch, doc) =>\r\n          batch.update(doc.ref, docsOrData)\r\n        );\r\n      }\r\n      return modify(\r\n        Object.keys(docsOrData).map(id => queryable.doc(String(id))),\r\n        (batch, doc) => batch.update(doc, docsOrData[doc.id])\r\n      );\r\n    },\r\n    remove() {\r\n      return modify(this.get(), (batch, doc) => batch.delete(doc.ref));\r\n    }\r\n  };\r\n\r\n  arrayMethods.forEach(method => {\r\n    query[method] = (...args) =>\r\n      query.get().then(results => results[method](...args));\r\n  });\r\n\r\n  return query;\r\n}\r\n\r\nObject.assign(create, {\r\n  fields(newSpecialFields) {\r\n    Object.assign(specialFields, newSpecialFields);\r\n    return this;\r\n  }\r\n});\r\n"]}